{"version":3,"sources":["fBase.js","components/AuthForm.js","routes/Auth.js","components/sweet.js","components/SweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setnewAccount","error","setError","onChange","e","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","event","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Sweet","sweetObj","isOwner","editing","setEditing","text","newSweet","setNewSweet","onDeleteClick","window","confirm","doc","id","delete","refFromURL","attachmentUrl","toggleEdditing","update","autoFocus","alt","src","faTrash","faPencilAlt","SweetFactory","userObj","sweet","setsweet","attachment","setAttachment","fileRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","maxLength","htmlFor","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","sweets","setsweets","useEffect","onSnapshot","snapshot","sweetArray","docs","map","data","marginTop","refreshUser","history","useHistory","displayName","newDisplayName","setNewDisplayName","getMySweets","where","orderBy","get","console","log","updateProfile","signOut","push","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","Profile","from","App","init","setInit","setIsLoggedIn","setUserObj","onAuthStateChanged","user","args","currentUser","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4786798b.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDRALtod6i8w4l1gG0q70alf_Q9HNzwuYE\",\r\n    authDomain: \"switter-e5357.firebaseapp.com\",\r\n    projectId: \"switter-e5357\",\r\n    storageBucket: \"switter-e5357.appspot.com\",\r\n    messagingSenderId: \"1039618690948\",\r\n    appId: \"1:1039618690948:web:c7d834a7d28c7a66b8d7d1\"\r\n  };\r\n\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  export const firebaseInstance = firebase;\r\n\r\n  export const authService = firebase.auth();\r\n  export const dbService = firebase.firestore();\r\n  export const storageService = firebase.storage();","import React,{ useState } from 'react'\r\nimport { authService } from '../fBase'\r\n\r\nconst AuthForm = () => {\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [ newAccount, setnewAccount ] = useState(true)\r\n    const [ error, setError ] = useState(\"\");\r\n    const onChange = e => {\r\n        const {target: {name, value}} = e;\r\n        if ( name === \"email\") {\r\n            setEmail(value);\r\n        } else if ( name === \"password\") {\r\n            setPassword(value);\r\n        }\r\n    }\r\n    const onSubmit = async(e) => {\r\n        e.preventDefault();\r\n        try{\r\n            let data;\r\n            if(newAccount){\r\n                //create account\r\n                data = await authService.createUserWithEmailAndPassword(email, password)\r\n            } else {\r\n                //log in\r\n                data = await authService.signInWithEmailAndPassword(email, password)\r\n            }\r\n        } catch(error) {\r\n            setError(error.message)\r\n        }\r\n    };\r\n\r\n    const toggleAccount = () => setnewAccount((prev) => !prev)\r\n\r\n    return(\r\n        <>\r\n            <form onSubmit={onSubmit} className=\"container\">\r\n                <input name=\"email\" type=\"text\" placeholder=\"Email\" required value={email} onChange={onChange} className=\"authInput\"/>\r\n                <input name=\"password\" type=\"password\" placeholder=\"Password\" required value={password} onChange={onChange} className=\"authInput\"/>\r\n                <input type=\"submit\" value={newAccount? 'Create Account': 'Log In'} className=\"authInput authSubmit\"/>\r\n                {error && <span className=\"authError\">{error}</span>}\r\n            </form>\r\n            <span onClick={toggleAccount} className=\"authSwitch\">\r\n                {newAccount? \"Sign In\" : \"Create Account\"}\r\n            </span>\r\n        </>\r\n    )\r\n}\r\nexport default AuthForm;","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faTwitter,\r\n  faGoogle,\r\n  faGithub,\r\n} from \"@fortawesome/free-brands-svg-icons\";\r\nimport { authService, firebaseInstance } from \"../fBase\";\r\nimport AuthForm from \"../components/AuthForm\";\r\n\r\nconst Auth = () => {\r\n    \r\n    // 구글, 깃헙 로그인하기\r\n    const onSocialClick = async (event) => {\r\n        //event.target.name 이랑 같은역활 name 찾기\r\n        const {target: {name}} = event;\r\n        let provider;\r\n        if ( name === \"google\"){\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n        } else if (name === \"github\") {\r\n            provider = new firebaseInstance.auth.GithubAuthProvider();\r\n        }\r\n        await authService.signInWithPopup(provider);\r\n    }\r\n    \r\n    return(\r\n        <div className=\"authContainer\">\r\n            <FontAwesomeIcon\r\n                icon={faTwitter}\r\n                color={\"#04AAFF\"}\r\n                size=\"3x\"\r\n                style={{ marginBottom: 30 }}\r\n        />\r\n            <AuthForm/>\r\n            <div className=\"authBtns\">\r\n                <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\r\n                    Continue with Google <FontAwesomeIcon icon={faGoogle} />\r\n                </button>\r\n                <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\r\n                    Continue with Github <FontAwesomeIcon icon={faGithub} />\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Auth;","import React, { useState } from 'react';\r\nimport { dbService, storageService } from '../fBase';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Sweet = ({sweetObj, isOwner }) => {\r\n    const [ editing, setEditing ] = useState(false);\r\n    const [ newSweet, setNewSweet ] = useState(sweetObj.text);\r\n    const onDeleteClick = async () => {\r\n        const ok = window.confirm(\"Are you sure you want to delete this sweet?\");\r\n        if(ok) {\r\n            //텍스트 지우기 삭제할 위치 cloud firestore 에서 찾기\r\n            await dbService.doc(`sweets/${sweetObj.id}`).delete();\r\n            //사진 지우기 삭제할 위치 cloud 에서 지우기\r\n            await storageService.refFromURL(sweetObj.attachmentUrl).delete()\r\n        }\r\n    }\r\n\r\n    const toggleEdditing = () => setEditing((prev) => !prev);\r\n    const onSubmit = async (event) => {\r\n        event.preventDefault();\r\n        await dbService.doc(`sweets/${sweetObj.id}`).update({\r\n            text: newSweet\r\n        });\r\n        setEditing(false)\r\n    };\r\n    const onChange = (event) => {\r\n        const {target: {value}} = event;\r\n        setNewSweet(value);\r\n    };\r\n    return(\r\n        <div className=\"sweet\">\r\n            {editing ? (\r\n                <>\r\n                <form onSubmit={onSubmit} className=\"container sweetEdit\">\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Edit your sweet\"\r\n                        value={newSweet}\r\n                        required\r\n                        autoFocus\r\n                        onChange={onChange}\r\n                        className=\"formInput\"\r\n                    />\r\n                    <input type=\"submit\" value=\"Update sweet\" className=\"formBtn\" />\r\n                </form>\r\n                <span onClick={toggleEdditing} className=\"formBtn cancelBtn\">\r\n                    Cancel\r\n                </span>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    {sweetObj.attachmentUrl && <div><img alt=\"\" src={sweetObj.attachmentUrl} /></div>}\r\n                    <h4>{sweetObj.text}</h4>\r\n                    {isOwner && \r\n                        <div className=\"sweet__actions\">\r\n                            <span onClick={onDeleteClick}>\r\n                                <FontAwesomeIcon icon={faTrash} />\r\n                            </span>\r\n                            <span onClick={toggleEdditing}>\r\n                                <FontAwesomeIcon icon={faPencilAlt} />\r\n                            </span>\r\n                        </div>\r\n                    }\r\n                </>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\nexport default Sweet;","import React, { useState} from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { dbService, storageService } from '../fBase';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst SweetFactory = ({userObj}) => {\r\n    const [sweet, setsweet] = useState(\"\");\r\n    const [ attachment, setAttachment ] = useState(\"\");\r\n\r\n    //promise 를 리턴하기 때문에 async로 써줌\r\n    const onSubmit = async (event) => {\r\n        if (sweet === \"\") {\r\n            return;\r\n        }\r\n        event.preventDefault();\r\n        let attachmentUrl = \"\"; //if문 안쪽에서 묶여있는걸 밖으로 빼줌\r\n        if (attachment !== \"\"){\r\n            //firebase 이미지 storage 추가하는 방법\r\n            const fileRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`) //collection 과 같이 firebase 에 이미지 업로드방법\r\n            const response = await fileRef.putString(attachment, \"data_url\");\r\n            //이미지 ulr 추적하기\r\n            attachmentUrl = await response.ref.getDownloadURL();\r\n            //이미지 sweet에 넣기\r\n        };\r\n        const sweetObj = {\r\n            text: sweet,\r\n            createdAt: Date.now(),\r\n            creatorId: userObj.uid,\r\n            attachmentUrl,\r\n        };\r\n        await dbService.collection(\"sweets\").add(sweetObj);\r\n        setsweet(\"\");\r\n        setAttachment(\"\");\r\n    }\r\n    \r\n    const onChange = (event) => {\r\n        const { target: {value} } = event;\r\n        setsweet(value);\r\n    }\r\n\r\n    const onFileChange = (event) => {\r\n        const {target: { files }} = event;\r\n        const theFile = files[0]; //파일 추적 하나의 파일만 받기\r\n        const reader = new FileReader(); //파읽읽는 reader 만들기\r\n        reader.onloadend = (finishedEvent) => {\r\n            const {currentTarget: {result}} = finishedEvent //파읽에서 꺼내기\r\n            setAttachment(result) // state 에 파일 이름 넣기\r\n        }\r\n        reader.readAsDataURL(theFile) //파일 읽는 js 함수 , MDN 참조 데이터를 얻기\r\n    }\r\n\r\n    const onClearAttachment = () => setAttachment(null);\r\n    return(\r\n        <form onSubmit={onSubmit} className=\"factoryForm\">\r\n            <div className=\"factoryInput__container\">\r\n                <input\r\n                className=\"factoryInput__input\"\r\n                value={sweet}\r\n                onChange={onChange}\r\n                type=\"text\"\r\n                placeholder=\"What's on your mind?\"\r\n                maxLength={120}\r\n                />\r\n                <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\r\n            </div>\r\n            <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\r\n                <span>Add photos</span>\r\n                <FontAwesomeIcon icon={faPlus} />\r\n            </label>\r\n            <input\r\n                id=\"attach-file\"\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                onChange={onFileChange}\r\n                style={{\r\n                opacity: 0,\r\n                }}\r\n            />\r\n            {attachment && \r\n                 <div className=\"factoryForm__attachment\">\r\n                    <div>\r\n                        <img\r\n                            alt=\"\"    \r\n                            src={attachment}\r\n                            style={{ backgroundImage: attachment }}\r\n                        />\r\n                    </div>\r\n                    <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\r\n                    <span>Remove</span>\r\n                    <FontAwesomeIcon icon={faTimes} />\r\n                    </div>\r\n                </div>\r\n            }\r\n        </form>\r\n    )\r\n}\r\nexport default SweetFactory;","import React, {useEffect, useState} from \"react\";\r\nimport Sweet from \"../components/sweet\";\r\nimport { dbService } from \"../fBase\";\r\nimport SweetFactory from '../components/SweetFactory';\r\n\r\nconst Home = ({ userObj }) => {\r\n    const [sweets, setsweets] = useState([]);\r\n\r\n    //트윗들 가져오는 방법(구식)\r\n    // const getsweets = async () => {\r\n    //     const dbsweets = await dbService.collection(\"sweets\").get();\r\n    //     dbsweets.forEach((document) => {\r\n    //         const sweetObject = {\r\n    //             ...document.data(),\r\n    //             id: document.id,\r\n    //         }\r\n    //         setsweets((prev) => [sweetObject, ...prev])\r\n    //     })\r\n    // }\r\n\r\n    useEffect(() => {\r\n        //구식 getsweets()\r\n        //새로운 방법으로 트윗 받아오기 onsnapshot 이용 더적게 rerender해줌\r\n        dbService.collection(\"sweets\").onSnapshot((snapshot) => {\r\n            const sweetArray = snapshot.docs.map((doc) => ({\r\n                id: doc.id,\r\n                ...doc.data(),\r\n            }));\r\n            setsweets(sweetArray);\r\n        })\r\n    },[])\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <SweetFactory userObj={userObj}/>\r\n            <div style={{ marginTop: 30 }}>\r\n                {sweets.map(sweet => (\r\n                    <Sweet \r\n                        key={sweet.id} \r\n                        sweetObj={sweet} \r\n                        isOwner={sweet.creatorId === userObj.uid}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Home;","import React, { useEffect, useState } from \"react\";\r\nimport { authService, dbService } from \"../fBase\";\r\nimport { useHistory } from \"react-router-dom\"\r\n\r\nexport default ({ userObj, refreshUser }) => {\r\n    const history = useHistory();\r\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName)\r\n    const onLogOutClick = () => {\r\n        authService.signOut();\r\n        history.push(\"/\");\r\n    }\r\n    // 프로필에 내가쓴글 찾는법\r\n    const getMySweets = async () => {\r\n        const sweets = await dbService // 서버접근\r\n        .collection(\"sweets\") //저장소 찾기\r\n        .where(\"creatorId\",\"==\", userObj.uid) //내가쓴글 찾기 부등호로 비교가능 where\r\n        .orderBy(\"createdAt\") //순서 정렬\r\n        .get(); //가져오기\r\n        console.log(sweets.docs.map((doc) => doc.data()));\r\n    }\r\n    //사용자의 이름 변경하기\r\n    const onChange = (event) => {\r\n        const { target: {value} } = event;\r\n        setNewDisplayName(value) //값 받아와서 넣기\r\n    }\r\n    const onSubmit =  async (event) => {\r\n        event.preventDefault();\r\n        if(userObj.displayName !== newDisplayName) {  //기존이름이랑 비교하기\r\n            await userObj.updateProfile({  //유저 업데이트 프로필 firebase\r\n                displayName: newDisplayName  //대입하기\r\n            })\r\n            refreshUser();\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getMySweets();\r\n    },[])\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <form onSubmit={onSubmit} className=\"profileForm\">\r\n            <input\r\n                onChange={onChange}\r\n                type=\"text\"\r\n                autoFocus\r\n                placeholder=\"Display name\"\r\n                value={newDisplayName}\r\n                className=\"formInput\"\r\n            />\r\n            <input\r\n                type=\"submit\"\r\n                value=\"Update Profile\"\r\n                className=\"formBtn\"\r\n                style={{\r\n                    marginTop: 10,\r\n                }}\r\n            />\r\n            </form>\r\n            <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\r\n                Log Out\r\n            </span>\r\n        </div>\r\n    )\r\n};","import React,{useEffect} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Navigation = ({userObj}) => {\r\n    // const checkUserObj = () => {\r\n    //     return userObj;\r\n    // }\r\n\r\n    // useEffect(() => {\r\n    //     checkUserObj()\r\n    // },[])\r\n    return(\r\n        <nav>\r\n            <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\r\n                <li>\r\n                    <Link to=\"/\" style={{ marginRight: 10 }}>\r\n                        <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\r\n                    </Link>\r\n                </li>\r\n                <li>\r\n                    <Link\r\n                        to=\"/profile\"\r\n                        style={{\r\n                            marginLeft: 10,\r\n                            display: \"flex\",\r\n                            flexDirection: \"column\",\r\n                            alignItems: \"center\",\r\n                            fontSize: 12,\r\n                        }}\r\n                        >\r\n                        <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\r\n                        <span style={{ marginTop: 10 }}>\r\n                            {userObj.displayName\r\n                            ? `${userObj.displayName}의 Profile`\r\n                            : \"Profile\"}\r\n                        </span>\r\n                    </Link>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\nexport default Navigation","import React from \"react\";\r\nimport { HashRouter as Router, Redirect, Route, Switch } from \"react-router-dom\";\r\nimport Auth from \"../routes/Auth\";\r\nimport Home from \"../routes/Home\";\r\nimport Profile from '../routes/Profile';\r\nimport Navigation from \"./Navigation\";\r\n\r\nconst AppRouter = ({refreshUser, isLoggedIn, userObj}) => {\r\n    return(\r\n        <Router>\r\n            {isLoggedIn && <Navigation userObj={userObj}/>}\r\n            <Switch>\r\n                {isLoggedIn ? (\r\n                <div\r\n                    style={{\r\n                    maxWidth: 890,\r\n                    width: \"100%\",\r\n                    margin: \"0 auto\",\r\n                    marginTop: 80,\r\n                    display: \"flex\",\r\n                    justifyContent: \"center\",\r\n                    }}\r\n                >\r\n                    <Route exact path=\"/\">\r\n                        <Home userObj={userObj}/>\r\n                    </Route>\r\n                    <Route exact path=\"/profile\">\r\n                        <Profile userObj={userObj} refreshUser={refreshUser}/>\r\n                    </Route>\r\n                    <Redirect from=\"*\" to=\"/\"/>\r\n                </div>\r\n                ) : (\r\n                    <>\r\n                        <Route exact path=\"/\">\r\n                            <Auth/>\r\n                        </Route>\r\n                        <Redirect from=\"*\" to=\"/\"/>\r\n                    </>\r\n                )}\r\n            </Switch>\r\n        </Router>\r\n    );\r\n};\r\nexport default AppRouter;","import React, { useState, useEffect } from \"react\";\r\nimport AppRouter from \"./Router\";\r\nimport { authService } from \"../fBase\";\r\n\r\nfunction App() {\r\n  const [ init, setInit ] = useState(false);\r\n  const [ isLoggedIn, setIsLoggedIn ] = useState(false);\r\n  const [ userObj, setUserObj ] = useState(null)\r\n  //authService.currentUser는 실제 로그인되었는지 잘확인할수가 없다. 그래서 useEffect사용 \r\n  //firebase가 시작도 전에 로그인유무를 체크하기때문\r\n  useEffect(() => {\r\n    authService.onAuthStateChanged((user) => {\r\n      if(user){\r\n        setIsLoggedIn(true);\r\n        //user 통째로 가져오는것 그러나 처리하기엔 너무많은양의 내용이들어옴\r\n        // setUserObj(user);\r\n        setUserObj({\r\n          //내가필요한 3가지 정보만 받아옴\r\n          displayName: user.displayName,\r\n          uid: user.uid,\r\n          updateProfile: (args) => user.updateProfile(args),\r\n        })\r\n      } else {\r\n        setIsLoggedIn(false)\r\n      }\r\n      setInit(true);\r\n    });\r\n  }, [])\r\n  //username 자동 업데이트해주는기능\r\n  const refreshUser = async () => {\r\n    // console.log(authService.currentUser.displayName)\r\n    //크기가 커서 이름이 바뀌지 않는다 보낸시점의 구분이 힘들기때문 react 가 판단하기 힘듬\r\n    // await setUserObj(authService.currentUser)\r\n    const user = authService.currentUser;\r\n    setUserObj({\r\n      //내가필요한 3가지 정보만 받아옴\r\n      displayName: user.displayName,\r\n      uid: user.uid,\r\n      updateProfile: (args) => user.updateProfile(args),\r\n    })\r\n  }\r\n  \r\n  return (\r\n    <>\r\n      {init ? <AppRouter refreshUser={refreshUser} userObj={userObj} isLoggedIn={isLoggedIn}/> : \"Initializing....\"}\r\n      <footer>&copy; {new Date().getFullYear()}Switter</footer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport \"./styles.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}